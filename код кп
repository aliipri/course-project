#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <stdlib.h>
#define _USE_MATH_DEFINES
#include <math.h>
#include <conio.h>
#include <string.h>

// вычисление суммы очков
int* get_score(int players, int* matrix_values, int* transpose_matrix_values);

// вычисление кол-ва побед
int* get_victories(int players, int* matrix_values, int* transpose_matrix_values);

// вычисление кол-ва поражений
int* get_defeats(int players, int* matrix_values, int* transpose_matrix_values);

// вычисление места (расчет с коэффициентом)
int* get_position(int players, int* victories, int* defeats);

// исходная таблица
void table_original(int players, char** name, int* matrix_values, int* transpose_matrix_values);

// результирующая таблица
void resulting_table(int players, char** name, int* matrix_values, int* transpose_matrix_values, int* score, int* position);

// поиск по критерию
void search_crit(char** name, int* score, int* position);

// сортировка по месту (от лучшего к худшему)
void sorting_location(char** name, int* score, int* position);

// замена имени в файле
void replacement_name(char*** name);

int main()
{
    system("chcp 1251");

    printf("ПОСТРОЕНИЕ ПРОГРАММЫ ПОДСЧЕТА ОЧКОВ В СОРЕВНОВАНИЯХ ПО НАСТОЛЬНОМУ ТЕННИСУ\n");

    int players; // переменная, считывающая количество игроков в списке
    char** name = malloc(4 * sizeof(char*)); // указатель на массив имён
    FILE* file;
    int* matrix_values;           // указатель на массив значений
    int* transpose_matrix_values; // указатель на транспонированный массив значений
    int current_player = 0;
    int* score;
    int* victories;
    int* defeats;
    int* position;
    int menu;

    file = fopen("tennis.txt", "r"); // открытие файла с списком игроков

    players = 1; 
    // чтение данных из файла
    // чтение строк/кол-ва игроков
    while (!feof(file))
    {
        if (fgetc(file) == '\n')
            players++;
    }
    rewind(file); 

    matrix_values = malloc(pow(players, 2) * sizeof(int));
    transpose_matrix_values = malloc(pow(players, 2) * sizeof(int)); // указатель на транспонированный массив значений

    for (int i = 0; i < players; i++)
    {
        name[i] = malloc(70 * sizeof(char)); // двумерный массив имён
        strcpy(name[i], "undefined");        // заполнение значениями
    }

    // чтение/заполнение значений
    while (fscanf(file, "%s", name[current_player]) != EOF)
    { // чтение имён
        for (int i = 0; i < players; i++)
        {
            fscanf(file, "%u", &(*(matrix_values + current_player * players + i)));
        } // чтение чисел
        current_player++;
    }

    // Транспонируем значения в массив
    for (int i = 0; i < players; i++)
    {
        for (int j = 0; j < players; j++)
        {
            *(transpose_matrix_values + j * players + i) = *(matrix_values + i * players + j);
        }
    }

    fclose(file); // закрытие файла

    score = get_score(players, matrix_values, transpose_matrix_values);
    victories = get_victories(players, matrix_values, transpose_matrix_values);
    defeats = get_defeats(players, matrix_values, transpose_matrix_values);
    position = get_position(players, victories, defeats);

    do
    {
        printf("\n\nТурнирная таблица по настольному теннису\n1) Исходная таблица\n2) Результирующая таблица\n3) Найти нужную команду по параметрам\n4) Отсортировать команды\n5) Изменить названия команд\n0) Выход из программы\nВыберите нужный пункт: ");
        scanf("%i", &menu);
        switch (menu)
        {

        case 1:
            table_original(players, name, matrix_values, transpose_matrix_values);
            break;

        case 2:
            resulting_table(players, name, matrix_values, transpose_matrix_values, score, position);
            break;

        case 3:;
            search_crit(name, score, position);
            break;

        case 4:
            sorting_location(name, score, position);
            break;

        case 5:
            replacement_name(&name);
            break;
        default:
            break;
        }
    } while (menu != 0);

    for (int i = 0; i < 4; i++) // освобождение памяти | массив имен
    {
        free(name[i]);
    }

    free(name);
    free(matrix_values);           // | массив знач 1
    free(transpose_matrix_values); // | массив знач 2
}

int* get_score(int players, int* matrix_values, int* transpose_matrix_values)
{
    int* score = malloc(players * sizeof(int));

    for (int i = 0; i < players; i++)
    {
        int sum = 0;
        for (int j = 0; j < players; j++)
        {
            if (*(matrix_values + i * players + j) == -1)
                continue;
            if (*(matrix_values + i * players + j) > *(transpose_matrix_values + i * players + j))
                sum += 2;
            else
                sum += 1;
        }
        score[i] = sum;
    }

    return score;
}

int* get_victories(int players, int* matrix_values, int* transpose_matrix_values)
{
    int* victories = malloc(players * sizeof(int));

    for (int i = 0; i < players; i++)
    {
        victories[i] = 0;
        for (int j = 0; j < players; j++)
        {
            if (*(matrix_values + i * players + j) > *(transpose_matrix_values + i * players + j))
            {
                victories[i] += 1;
            }
        }
    }

    return victories;
}

int* get_defeats(int players, int* matrix_values, int* transpose_matrix_values)
{
    int* defeats = malloc(players * sizeof(int));

    for (int i = 0; i < players; i++)
    {
        defeats[i] = 0;
        for (int j = 0; j < players; j++)
        {
            if (*(matrix_values + i * players + j) < *(transpose_matrix_values + i * players + j))
            {
                defeats[i] += 1;
            }
        }
    }

    return defeats;
}

int* get_position(int players, int* victories, int* defeats)
{
    int* position = malloc(players * sizeof(int));

    for (int i = 0; i < players; i++)
    {
        position[i] = players - victories[i];
    }

    for (int i = 0; i < players; i++)
    {
        for (int j = i + 1; j < players; j++)
        {
            if (position[i] == position[j])
            {
                int coef1;
                int coef2;
                if (defeats[i] != 0)
                {
                    coef1 = victories[i] / defeats[i];
                }
                else
                {
                    coef1 = victories[i];
                }
                if (defeats[i] != 0)
                {
                    coef2 = victories[j] / defeats[j];
                }
                else
                {
                    coef2 = victories[j];
                }
                if (coef1 > coef2)
                {
                    position[i] = position[i] - 1;
                }
                else
                {
                    position[j] = position[j] - 1;
                }
            }
        }
    }

    return position;
}

void table_original(int players, char** name, int* matrix_values, int* transpose_matrix_values)
{
    printf("\n № по порядку |   имя участника  |");
    for (int i = 0; i < players; i++)
    {
        if (i == (players / 2))
        {
            printf("%14s", "№ по порядку");
        }
        else
            printf("%10s ", "");
    }
    printf("|");

    printf("\n              |                  |");
    for (int i = 1; i <= players; i++)
        printf("      %i    |", i);
    printf("\n              |                  |");
    for (int i = 1; i <= players; i++)
        printf("    Счет   |");
    printf("\n");
    for (int i = 0; i < players; i++)
    {
        printf("          %i   | %16s |", i + 1, name[i]);
        for (int j = 0; j < players; j++)
        {
            if (*(matrix_values + i * players + j) == -1)
            {
                printf("           |");
            }
            else
                printf("     %i:%i   |", *(matrix_values + i * players + j), *(transpose_matrix_values + i * players + j));
        }
        printf("\n");
    }
    printf("\n\n");
}

void resulting_table(int players, char** name, int* matrix_values, int* transpose_matrix_values, int* score, int* position)
{
    printf("\n № по порядку |   имя участника  |");

    for (int i = 0; i < players; i++)
    {
        if (i == (players / 2))
        {
            printf("%6s", "№ по порядку ");
        }
        else
            printf("%9s ", "");
    }
    printf("| Сумма очков | место |");

    printf("\n              |                  |");
    for (int i = 1; i <= players; i++)
        printf("    %i     |", i);

    printf("             |       |\n              |                  |");
    for (int i = 1; i <= players; i++)
        printf("   Очки   |");
    printf("             |       |\n");
    for (int i = 0; i < players; i++)

    {
        printf("       %i      | %16s |", i + 1, name[i]);

        for (int j = 0; j < players; j++)
        {
            if (*(matrix_values + i * players + j) == -1)
            {
                printf("          |");
            }
            else
                printf("     %1i    |", *(matrix_values + i * players + j) > *(transpose_matrix_values + i * players + j) ? 2 : 1);
        }

        printf("  %6i%5s|    %i  |\n", score[i], "", position[i]);
    }
    printf("\n\n");
}

void search_crit(char** name, int* score, int* position)
{
    int sub_menu;
    printf("\n1) Найти команду с максимальным количеством очков\n2) Найти команду с минимальным количеством очков\n3) Найти команды с количеством очков больше ввденного значения\n4) Найти команды с количеством очков меньше ввденного значения\n0) Вернуться в главное меню\nВыберите нужный параметр: ");
    scanf("%i", &sub_menu);
    switch (sub_menu)
    {
    case 1:
        // Max
        int max_iter;
        int max = INT_MIN;
        for (int i = 0; i < 4; i++)
        {
            if (score[i] > max)
            {
                max = score[i];
                max_iter = i;
            }
        }
        printf("\nКоманда %s - Суммарное кол-во очков %i\n", name[max_iter], score[max_iter]);
        break;
    case 2:
        // Min
        int min_iter;
        int min = INT_MAX;
        for (int i = 0; i < 4; i++)
        {
            if (score[i] < min)
            {
                min = score[i];
                min_iter = i;
            }
        }
        printf("\nКоманда %s - Суммарное кол-во очков %i\n", name[min_iter], score[min_iter]);
        break;
    case 3:
        // Bigger
        printf("\nВведите кол-во очков, если хотите найти команды, кол-во очков которых больше введенного: ");
        int biggest;
        scanf("%i", &biggest);
        int exist_for_big = 0;
        for (int i = 0; i < 4; i++)
        {
            if (score[i] > biggest)
            {
                exist_for_big = 1;
                printf("Команда %s - %i очков\n", name[i], score[i]);
            }
        }
        if (exist_for_big == 0)
        {
            printf("Таких команд не существует!");
        }
        break;
    case 4:
        // Smaller
        printf("\nВведите кол-во очков, если хотите найти команды, кол-во очков которых меньше введенного: ");
        int smallest;
        scanf("%i", &smallest);
        int exist_for_small = 0;
        for (int i = 0; i < 4; i++)
        {
            if (score[i] < smallest)
            {
                exist_for_small = 1;
                printf("Команда %s - %i очков\n", name[i], score[i]);
            }
        }
        if (exist_for_small == 0)
        {
            printf("Таких команд не существует!");
        }
        break;
    default:
        break;
    }

    printf("\n\n");
}

void sorting_location(char** name, int* score, int* position)
{
    int* mesto_sort = malloc(4 * sizeof(int));
    for (int i = 0; i < 4; i++)
        mesto_sort[i] = position[i];

    int* sort_iter = malloc(4 * sizeof(int));
    for (int i = 0; i < 4; i++)
        sort_iter[i] = i;

    for (int i = 0; i < 4; i++)
    {
        int flag = 1;
        for (int j = 0; j < 4 - (i + 1); j++)
        {
            if (mesto_sort[j] > mesto_sort[j + 1])
            {
                flag = 0;
                int transpose_matrix_values = mesto_sort[j]; // создали дополнительную переменную
                mesto_sort[j] = mesto_sort[j + 1];           // меняем местами
                mesto_sort[j + 1] = transpose_matrix_values; // значения элементов

                transpose_matrix_values = sort_iter[j];
                sort_iter[j] = sort_iter[j + 1];
                sort_iter[j + 1] = transpose_matrix_values;
            }
        }
        if (flag == 1)
        {
            break;
        }
    }

    for (int i = 0; i < 4; i++)
    {
        printf("\nКоманда %s - Сумма очков %i - Место %i\n", name[sort_iter[i]], score[sort_iter[i]], position[sort_iter[i]]);
    }
    printf("\n\n");
}

void replacement_name(char*** name)
{
    printf("\nЗамена существующих имен\n");
    for (int i = 0; i < 4; i++)
    {
        printf("Хотите заменить имя команды %s?(y/n) ", (*name)[i]);
        char solution;
        scanf(" %c", &solution);
        if (solution == 'y')
        {
            printf("Введите новое название: ");
            char new_name_string[70];
            scanf("%s", &new_name_string);
            for (int j = 0; j < 70; j++)
                (*name)[i][j] = new_name_string[j];
        }
    }
    printf("\n\n");
}
